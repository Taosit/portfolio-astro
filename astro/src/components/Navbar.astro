<nav>
  <button class="language"></button>
  <div class="nav-items">
    <a href="#home" class="nav-item home-link active">Home</a>
    <a href="#projects" class="nav-item projects-link">Projects</a>
    <a href="#contact" class="nav-item contact-link">Contact</a>
  </div>
  <button class="hamburger" aria-label="Open the menu">
    <span class="line line1" aria-hidden="true"></span>
    <span class="line line2" aria-hidden="true"></span>
    <span class="line line3" aria-hidden="true"></span>
  </button>
</nav>
<div class="nav-collapse">
  <a class="nav-item-collapse home-link active hidden" href="#home">Home</a>
  <hr />
  <a class="nav-item-collapse projects-link hidden" href="#projects">Projects</a
  >
  <hr />
  <a class="nav-item-collapse contact-link hidden" href="#contact">Contact</a>
</div>

<style>
  nav {
    position: fixed;
    top: 0;
    height: 3em;
    width: 100%;
    background-image: linear-gradient(
      180deg,
      #52514e 0%,
      var(--dark-gray) 100%
    );
    box-shadow: 0px 4px 4px rgba(43 41 38 / 0.5);
    display: flex;
    z-index: 10;
    padding: 0 0.5em !important;
  }

  .language {
    background: transparent;
    color: #e1e1e1;
    border: none;
    cursor: pointer;
    font-size: 1.25rem;
    font-style: italic;
  }

  .nav-items {
    margin-left: auto;
    display: none;
  }

  .nav-item {
    font-size: 1.5rem;
    color: #d8d8d8;
    font-weight: 500;
    letter-spacing: 1px;
    display: flex;
    align-items: center;
    cursor: pointer;
  }

  .nav-item.active {
    text-decoration: underline;
    text-decoration-color: #ffd382;
    text-decoration-thickness: 3px;
  }

  .nav-item-text {
    color: #544a39;
    font-weight: bold;
    font-size: 20px;
  }

  .hamburger {
    position: absolute;
    right: 4px;
    height: 100%;
    aspect-ratio: 1/1;
    width: 48px;
    border: 0;
    background: transparent;
    padding: 0 0.3em;
    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    align-items: flex-end;
    cursor: pointer;
  }

  .line {
    width: 100%;
    height: 3px;
    background: #e1e1e1;
    border-radius: 2px;
  }

  .line2 {
    width: 80%;
  }

  .line1 {
    transform-origin: 0% 0%;
    transition: transform 0.4s ease-in-out;
  }

  .line2 {
    transition: transform 0.2s ease-in-out;
  }

  .line3 {
    transform-origin: 0% 100%;
    transition: transform 0.4s ease-in-out;
  }

  .nav-collapse {
    position: fixed;
    top: 0;
    background-color: #605f5a;
    width: 100%;
    transform: translateY(-10em);
    transition: transform 0.5s ease-out;
    z-index: 5;
  }

  hr {
    width: 95%;
    margin: 0 auto;
    border: 0;
    height: 0;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
    border-bottom: 1px solid rgba(255, 255, 255, 0.3);
  }

  .nav-item-collapse {
    height: 3em;
    font-weight: 600;
    color: rgb(248, 248, 248);
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .nav-item-collapse.active {
    text-decoration: underline;
    text-decoration-color: #ffd382;
    text-decoration-thickness: 3px;
  }

  .nav-collapse.active {
    transform: translateY(3em);
  }

  .hamburger.active .line1 {
    transform: translate(5px, -1px) rotate(45deg);
  }

  .hamburger.active .line2 {
    transform: scaleY(0);
  }

  .hamburger.active .line3 {
    transform: translateX(5px) rotate(-45deg);
  }

  @media (min-width: 768px) {
    nav {
      padding: 0 max(10%, 50vw - 600px) !important;
    }
    .language {
      font-size: 1.5rem;
    }
    .nav-items {
      display: flex;
      gap: 1.5rem;
    }
    .hamburger {
      display: none;
    }
    main {
      width: min(80%, 1200px);
    }
  }
</style>

<script>
  const languageButton = document.querySelector(".language")!;
  const hamburger = document.querySelector(".hamburger")!;
  const navCollapsItemContainer = document.querySelector(".nav-collapse")!;
  const navCollopasItems = navCollapsItemContainer.querySelectorAll("a");

  const sections = document.querySelectorAll("section");
  const navItemContainer = document.querySelector(".nav-items")!;
  const navItems = navItemContainer.querySelectorAll("a");

  // ------ translation purpose ------
  const h1s = document.querySelectorAll("h1");
  const h2s = document.querySelectorAll("h2");
  const intros = document.querySelectorAll(".intro");
  const hints = document.querySelectorAll(".hint-text");
  const links = document.querySelectorAll(".link-to-projects");
  const labels = document.querySelectorAll("form label");
  const submitButton = document.querySelector("button[type='submit']")!;
  const messages = document.querySelectorAll(".message-text");

  let isNavOpen = false;

  const linkTexts = {
    fr: {
      home: "Accueil",
      projects: "Projets",
      contact: "Contact",
    },
    en: {
      home: "Home",
      projects: "Projects",
      contact: "Contact",
    },
  };

  const h1Texts = {
    fr: ["Salut!", "Je suis Jingxuan."],
    en: ["Hi!", "I'm Jingxuan."]
  };

  const h2Texts = {
    fr: ["Mes projets", "Contactez-moi"],
    en: ["My projects", "Contact me"]
  }

  const introTexts = {
    en: [["I’m a highly motivated web developer. I make responsive and accessible websites using HTML, CSS, JS, React and NextJS.", 
    "I'm interested in a wide range of web technologies such as serverless functions and WebSockets."],
    ["I love building projects. I jump from one project to another while exploring different technologies and levelling up my practical skills.",
    "Beside programming languages, I also like spoken languages. I put my passion for languages into code.",
    "All my projects are designed and implemented from ground up. Some are built around languages. Take a look!"]],
    fr: [["Je suis une développeure web très motivée. Je crée des sites web résponsifs et accessibles en utilisant HTML, CSS, JS, React et NextJS.",
    "Je m'intéresse à un large éventail de technologies web telles que les fonctions serverless et les WebSockets."],
    ["J'adore créer des projets. Je passe d'un projet à l'autre tout en explorant différentes technologies et en améliorant mes compétences pratiques.",
    "Outre les langages de programmation, j'aime aussi les langues parlées. Je mets ma passion pour les langues dans le code.",
    "Tous mes projets sont conçus et implémentés à partir de zéro. Certains sont construits autour des langues. Venez voir!"]]
  }

  const hintText = {
    en: "Click a feature to play",
    fr: "Cliquez sur une fonctionnalité"
  }

  const linkText = {
    en: "link",
    fr: "lien"
  }

  const labelTexts = {
    en: ["Name", "Email", "Message"],
    fr: ["Nom", "Email", "Message"]
  }

  const buttonText = {
    en: "Send",
    fr: "Envoyer"
  }

  const messageTexts = {
    en: ["Message sent successfully", "Message failed to send"],
    fr: ["Message envoyé avec succès", "Échec de l'envoi du message"]
  }

  const setContentInLanguage = (language: "en" | "fr") => {
    languageButton.textContent = language === "fr" ? "English": "Français";
    navItems.forEach((item) => {
      item.textContent = linkTexts[language][item.getAttribute("href")!.slice(1) as keyof typeof linkTexts.en];
    });
    navCollopasItems.forEach((item) => {
      item.textContent = linkTexts[language][item.getAttribute("href")!.slice(1) as keyof typeof linkTexts.en];
    });
    h1s.forEach((h1, i) => {
      h1.textContent = h1Texts[language][i];
    });
    h2s.forEach((h2, i) => {
      h2.textContent = h2Texts[language][i];
    });
    intros.forEach((intro, i) => {
      intro.querySelectorAll("p").forEach((p, j) => {
        p.textContent = introTexts[language][i][j];
      });
    });
    hints.forEach((hint) => {
      hint.textContent = hintText[language];
    });
    links.forEach(link => {
      link.textContent = linkText[language]
    })
    labels.forEach((label, i) => {
      label.textContent = labelTexts[language][i]
    })
    submitButton.textContent = buttonText[language];
    messages.forEach((message, i) => {
      message.textContent = messageTexts[language][i];
    });
  };

  const getPreferredLanguage = () => {
    const language = localStorage.getItem("language");
    if (language) return language as "en" | "fr";
    const browserLanguage = window.navigator.language.split("-")[0];
    if (browserLanguage === "fr") return "fr";
    return "en";
  }

  const getLanguageAndSetContent = () => {
    const language = getPreferredLanguage();
    setContentInLanguage(language);
  };

  getLanguageAndSetContent();

  languageButton.addEventListener("click", () => {
    const newLanguage = languageButton.textContent === "Français" ? "fr" : "en";
    localStorage.setItem("language", newLanguage);
    // setContentInLanguage(newLanguage);
    location.reload();
  });

  // window.addEventListener("storage", (e) => {
  //   console.log(JSON.parse(window.localStorage.getItem("language")));
  // });

  const showNav = () => {
    navCollapsItemContainer.ariaHidden = "false";
    navCollopasItems.forEach((item) => {
      item.classList.remove("hidden");
    });
    hamburger.classList.add("active");
    navCollapsItemContainer.classList.add("active");
    isNavOpen = true;
  };

  const hideNav = () => {
    hamburger.classList.remove("active");
    navCollapsItemContainer.classList.remove("active");
    isNavOpen = false;
    setTimeout(() => {
      navCollopasItems.forEach((item) => {
        item.classList.add("hidden");
      });
      navCollapsItemContainer.ariaHidden = "true";
    }, 500);
  };

  const toggleNav = () => {
    if (isNavOpen) hideNav();
    else showNav();
  };

  hamburger.addEventListener("click", toggleNav);

  window.addEventListener("click", (e: MouseEvent) => {
    const target = e.target as HTMLElement;
    if (
      !target ||
      target.closest(".nav-collapse") ||
      target.closest(".hamburger")
    )
      return;
    if (isNavOpen) toggleNav();
  });

  navCollapsItemContainer.addEventListener("click", hideNav);

  const getCurrentSection = () => {
    let current = "home";
    sections.forEach((section) => {
      const sectionTop = section.offsetTop;
      if (scrollY >= sectionTop - 48) {
        current = section.getAttribute("id")!;
      }
    });
    return current;
  };

  const updateNavItems = (
    currentSection: string,
    navItems: NodeListOf<HTMLAnchorElement>,
    activeClassName: string
  ) => {
    navItems.forEach((span) => {
      span.classList.remove(activeClassName);
      if (
        [...span.classList].some((className) =>
          className.includes(currentSection)
        )
      ) {
        span.classList.add(activeClassName);
      }
    });
  };

  window.addEventListener("scroll", () => {
    const currentSection = getCurrentSection();
    updateNavItems(currentSection, navItems, "active");
    updateNavItems(currentSection, navCollopasItems, "active");
  });
</script>
